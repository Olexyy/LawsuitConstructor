@model MVC.Models.Field

@{
    ViewBag.Title = MVC.Translate.It("New field");
}

<script src="@Url.Content("~/Scripts/custom/toggle-field-onchange.js")"></script>

<h2> @ViewBag.Title </h2>
@using (Html.BeginForm()) { @Html.AntiForgeryToken()  @Html.ValidationSummary(true)
    <fieldset>
        <div class="editor-label">
            @MVC.Translate.It("Name")
        </div>
        <div class="editor-field">
            @Html.EditorFor(Model => Model.FieldName)
            @Html.ValidationMessageFor(Model => Model.FieldName)
        </div>
        <div class="editor-label">
            @MVC.Translate.It("Content type")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(Model => Model.FieldDataType, MVC.Defines.FieldDataTypes, new { @id = "trigger"})
            @Html.ValidationMessageFor(Model => Model.FieldDataType)
        </div>
        <div id="toggle"> </div>
        <div class="editor-label toggle">
            @MVC.Translate.It("Marker") <description class="description">@MVC.Translate.It(" (only letters and numbers without spaces)")</description>
        </div>
        <div class="editor-field toggle">
            @Html.EditorFor(Model => Model.FieldMarker)
            @Html.ValidationMessageFor(Model => Model.FieldMarker)
        </div>
        <div class="editor-label">
            @MVC.Translate.It("Text")
        </div>
        <div class="editor-field">
            @Html.EditorFor(Model => Model.FieldText)
            @Html.ValidationMessageFor(Model => Model.FieldText)
        </div>
        <div class="editor-label">
            @MVC.Translate.It("Weight in list")
        </div>
        <div class="editor-field">
            @Html.EditorFor(Model => Model.FieldWeight)
            @Html.ValidationMessageFor(Model => Model.FieldWeight)
        </div>
        <p>
            <input type="submit" value="@MVC.Translate.It("Add")" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink(MVC.Translate.It("To list"), "Index", "Field")
</div>
@{/*

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
   */ }
