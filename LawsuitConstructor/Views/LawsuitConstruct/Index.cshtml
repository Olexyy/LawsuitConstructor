@model List<MVC.Models.FieldData>
@{
    ViewBag.Title = MVC.Translate.It("Data for lawsuit");
    string message = (string)TempData["Message"];
    List<string> dateTimePickers = new List<string>();
}
<script src="@Url.Content("~/Scripts/custom/toggle-field-data-onchange.js")"></script>
<script src="@Url.Content("~/Scripts/jquery-1.8.3.min.js")"></script>
<script src="@Url.Content("~/Scripts/date_time_picker/jquery.datetimepicker.full.js")"></script>
<link href="@Url.Content("~/Scripts/date_time_picker/jquery.datetimepicker.min.css")" rel="stylesheet" type="text/css" />
<h2> @ViewBag.Title </h2>
<description class="description">@MVC.Translate.It("Relevance and validity of the claim depends on the data entered")</description>
@if(message != null){
    <h4> @message </h4>
}
@if(Model.Count == 0){
    <p> @MVC.Translate.It("List is empty") </p>
}
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <fieldset>
@for(int i = 0; i < Model.Count; i++){
    <div class="editor-label">
        @Model[i].fieldText
    </div>
    <div class="editor-field">
        @Html.HiddenFor(model => model[i].marker)
        @Html.HiddenFor(model => model[i].dataType)
        @Html.HiddenFor(model => model[i].lawsuitId)
        @Html.HiddenFor(model => model[i].fieldText)
        @Html.HiddenFor(model => model[i].blockId)
        @switch (Model[i].dataType)
        {
            case (int)MVC.Defines.FieldDataTypesEnum.Text:
                @Html.EditorFor(model => model[i].textData)
                @Html.ValidationMessageFor(model => model[i].textData)
                break;
            case (int)MVC.Defines.FieldDataTypesEnum.Number:
                @Html.EditorFor(model => model[i].numberData)
                @Html.ValidationMessageFor(model => model[i].numberData)
                break;
            case (int)MVC.Defines.FieldDataTypesEnum.Date:
                Model[i].dateData = DateTime.Now.ToString("dd.MM.yyyy");
                @Html.TextBoxFor(model => model[i].dateData, new { id = "dateTimePicker" + i })
                dateTimePickers.Add("dateTimePicker" + i);
                @Html.ValidationMessageFor(model => model[i].dateData)
                break;
            case (int)MVC.Defines.FieldDataTypesEnum.Money:
                @Html.EditorFor(model => model[i].moneyData)
                @Html.ValidationMessageFor(model => model[i].moneyData)
                break;
            case (int)MVC.Defines.FieldDataTypesEnum.Question:
                <div class="trigger">
                @Html.CheckBoxFor(model => model[i].questionData, new {@class = "control" })
                @if (Model[i].children != null)
                {
                    for (int j = 0; j < Model[i].children.Count; j++)
                    {
                    <div class ="toggle">
                        <div class="editor-label">
                            @Model[i].children[j].fieldText
                        </div>
                        <div class="editor-field">
                            @Html.HiddenFor(model => model[i].children[j].marker)
                            @Html.HiddenFor(model => model[i].children[j].dataType)
                            @Html.HiddenFor(model => model[i].children[j].lawsuitId)
                            @Html.HiddenFor(model => model[i].children[j].fieldText)
                            @switch (Model[i].children[j].dataType)
                            {
                                case (int)MVC.Defines.FieldDataTypesEnum.Text:
                                    @Html.EditorFor(model => model[i].children[j].textData)
                                    @Html.ValidationMessageFor(model => model[i].children[j].textData)
                                    break;
                                case (int)MVC.Defines.FieldDataTypesEnum.Number:
                                    @Html.EditorFor(model => model[i].children[j].numberData)
                                    @Html.ValidationMessageFor(model => model[i].children[j].numberData)
                                    break;
                                case (int)MVC.Defines.FieldDataTypesEnum.Date:
                                    Model[i].children[j].dateData = DateTime.Now.ToString("dd.MM.yyyy");
                                    @Html.TextBoxFor(model => model[i].children[j].dateData, new { id = "dateTimePicker" + i + j })
                                    dateTimePickers.Add("dateTimePicker" + i + j);
                                    @Html.ValidationMessageFor(model => model[i].children[j].dateData)
                                    break;
                                case (int)MVC.Defines.FieldDataTypesEnum.Money:
                                    @Html.EditorFor(model => model[i].children[j].moneyData)
                                    @Html.ValidationMessageFor(model => model[i].children[j].moneyData)
                                    break;
                            }
                         </div>
                    </div>
                    }
                }
                </div>
                break;
        }
     </div>
 }
    <p>
        <input type="submit" value="@MVC.Translate.It("Continue")" />
    </p>
</fieldset>
}
@if(Request.IsAuthenticated){    
    <p>@Html.ActionLink(MVC.Translate.It("Administrative menu"), "Admin", "Admin")</p>
}
@foreach (string dateTimePicker in dateTimePickers)
{
    <script>
        $.datetimepicker.setLocale('uk');
        $('#@dateTimePicker').datetimepicker({
            timepicker: false,
            format: 'd.m.Y',
        });
    </script>
}
